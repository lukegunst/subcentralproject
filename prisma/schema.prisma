// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          String    @default("CUSTOMER")
  
  // âœ… Profile fields
  phone         String?
  address       String?
  businessName  String?
  description   String?
  profileImage  String?  
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  
  accounts      Account[]
  sessions      Session[]
  subscriptions UserSubscription[]
  plans         Plan[]
  payouts       Payout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  interval      String   // "monthly", "yearly", etc.
  merchantId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  merchant      User               @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  subscriptions UserSubscription[]
}

model UserSubscription {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  status    String   @default("active") // "active", "cancelled", "expired"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([userId, planId])
}

model Payout {
  id            String    @id @default(cuid())
  merchantId    String
  amount        Float
  fee           Float
  netAmount     Float
  status        String    @default("scheduled") // "scheduled", "processing", "paid", "failed"
  scheduledDate DateTime
  paidDate      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  merchant User @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}