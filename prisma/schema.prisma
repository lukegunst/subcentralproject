generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  merchant      Merchant?
  subscriptions UserSubscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Merchant {
  id              String   @id @default(cuid())
  userId          String   @unique
  businessName    String
  description     String?
  contactEmail    String
  contactPhone    String?
  bankDetails     Json?
  stripeAccountId String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionPlans SubscriptionPlan[]
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  merchantId  String
  title       String
  description String
  price       Float
  currency    String   @default("ZAR")
  interval    String   @default("month")
  isActive    Boolean  @default(true)
  stripePriceId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  merchant      Merchant           @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  subscriptions UserSubscription[]
}

model UserSubscription {
  id                   String    @id @default(cuid())
  userId               String
  planId               String
  status               SubscriptionStatus
  stripeSubscriptionId String?
  startDate            DateTime  @default(now())
  endDate              DateTime?
  cancelledAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user     User             @relation(fields: [userId], references: [id])
  plan     SubscriptionPlan @relation(fields: [planId], references: [id])
  payments Payment[]

  @@unique([userId, planId])  // ðŸ‘ˆ Add this line, don't duplicate model
}

model Payment {
  id             String    @id @default(cuid())
  subscriptionId String
  amount         Float
  platformFee    Float
  merchantAmount Float
  currency       String    @default("ZAR")
  status         String    @default("pending")
  stripePaymentId String?
  paidAt         DateTime?
  createdAt      DateTime  @default(now())

  subscription UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  MERCHANT
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAUSED
}